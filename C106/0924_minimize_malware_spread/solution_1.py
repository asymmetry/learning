#!/usr/bin/env python3

from collections import Counter


class Solution:

    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """

        l_g = len(graph)
        self.pre = [0] * l_g

        for i in range(l_g):
            self.pre[i] = i

        for i in range(l_g):
            for j in range(l_g):
                if graph[i][j] == 1:
                    self._mix(i, j)

        count = Counter(self.pre)

        initial.sort()

        result = 0
        max_ = 0
        for i in initial:
            pre_i = self.pre[i]
            count_i = count[pre_i]
            if count_i > max_:
                result = i
                max_ = count_i

        return result

    def _find(self, x):
        p = x
        while p != self.pre[p]:
            p = self.pre[p]

        i = x
        while self.pre[i] != p:
            j = self.pre[i]
            self.pre[i] = p
            i = j

        return p

    def _mix(self, x, y):
        fx = self._find(x)
        fy = self._find(y)
        if fx != fy:
            self.pre[fy] = fx


if __name__ == '__main__':
    print(Solution().minMalwareSpread([[1, 1, 0], [1, 1, 0], [0, 0, 1]],
                                      [0, 1]))
    print(Solution().minMalwareSpread([[1, 0, 0], [0, 1, 0], [0, 0, 1]],
                                      [0, 2]))
    print(Solution().minMalwareSpread([[1, 1, 1], [1, 1, 1], [1, 1, 1]],
                                      [1, 2]))
